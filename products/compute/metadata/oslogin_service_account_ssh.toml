region_tag = ["compute_oslogin_ssh"]
creation_date = 2023-12-04
modification_date = 2023-12-04
title = "Compute OS Login via SSH"
description = "Runs a command on a remote system, authenticating with a Service account."
standalone = true
deprecated = false
# What kinds of preconditions needs to be met. Natural language. (optional)
requirements = "The Compute instance, firewall rule and Service Account to be used for authentication must exist."
# What will happen when the code sample in the region tag gets executed. Natural Language. (optional)
effects = "Runs the given input command on the remote instance and prints the result."

[requirements]
# List of services that need to be enabled for the sample (and tests) to work.
# The system will use `gcloud services enable <api>` to turn them all on.
apis = [
    'compute.googleapis.com',
    'iam.googleapis.com'
]
# What permissions are needed for the code sample to properly work.
required_permissions = [
# TODO: The permissions required are > 50. Should we list them all?
]
# What roles can be used to provide neccessary permissions.
# Those should be predefined roles, but in case you want to use a custom role, use it in the form of:
# projects/<project_name>/roles/<role_name>
# So it is clear that it is a custom role.
required_roles = [
    'roles/compute.instanceAdmin.v1',
    'roles/compute.securityAdmin',
    'roles/iam.serviceAccountAdmin',
    'roles/iam.serviceAccountKeyAdmin',
    'roles/iam.serviceAccountUser',
    'roles/compute.osAdminLogin',
    'roles/compute.osLoginExternalUser'
]



[[tests]]
# Indicates if the resoruces prepared in the setup section can be shared between tests.
# This is used to tests that don't alter the resources (i.e. listing PubSub topics).
# If set to false, setup and cleanup will happen for each language separately.
# If set to true, setup and cleanup will happen only once.
shared_resources = false

# How many tests from this set can be executed at the same time. Needed in case of limited resources.
# Different versions of a language are treated as separate language.
parallel_limit = 16

[tests.variables]
# Using a single project for all the languages. Many tests can be run with `parallel = true`, which
# will speed things up.
# TODO: Replace the PROJECT_ID with a dynamic value.
PROJECT_ID = 'unified-testing-project'
# The series of #### gets replaced by random string to generate unique IDs.
# A different value is prepared for each test language. Different versions of a language
# count as different languages.
# The series of ##### will be replaced by a zone name from the list of zones available.
TEST_ID = 'test-compute-oslogin-#####'
INSTANCE_NAME = '$TEST_ID'
ZONE = '#####'
SERVICE_ACCOUNT = '{$TEST_ID}@{$PROJECT_ID}.iam.gserviceaccount.com'
HOSTNAME = ''
INPUT_COMMAND = 'uname -a'
FIREWALL_RULE_NAME = '$TEST_ID'


[tests.setup]
# This needs to exit with code 0. If it doesn't the test will fail.
# If shared_resources = false, this command will be executed for every language separately.
# If it's true, the command will be executed only once before all the tests.
#
# Create a service account
# Create an instance
# Bind the service account to osLogin compute role
# Create firewall
# TODO: instead of service account keys, can we use impersonation?
commands = [
            "gcloud iam service-accounts create $SERVICE_ACCOUNT",
            "sleep 20s",
            "gcloud iam service-accounts add-iam-policy-binding  $SERVICE_ACCOUNT --member='serviceAccount:$SERVICE_ACCOUNT --role='roles/serviceAccountsUser'",
            "gcloud compute instances create $INSTANCE_NAME --image-family=ubuntu-2204-lts --image-project=ubuntu-os-cloud --boot-disk-size=\"25GB\" --boot-disk-type=\"pd-standard\" --boot-disk-auto-delete=\"true\" --network=\"default\" --machine-type=\"e2-micro\" --tags=\"ssh-oslogin-test\" --network-tier=\"PREMIUM\" --service-account=$SERVICE_ACCOUNT --scopes=\"https://www.googleapis.com/auth/cloud-platform\" --metadata=\"enable-oslogin=TRUE\" --zone=\"us-central1-a\"",
            "sleep 30s",
            "export HOSTNAME=gcloud compute instances describe $INSTANCE_NAME --zone=$ZONE --format\"yaml(networkInterfaces[0].accessConfigs[0].natIP)\"",
            "gcloud compute instances add-iam-policy-binding $INSTANCE_NAME --zone=$ZONE --member=serviceAccount:$SERVICE_ACCOUNT --role='roles/compute.osLogin'",
            "gcloud compute firewall-rules create $FIREWALL_RULE_NAME --network=\"default\" --target-tags=\"ssh-oslogin-test\" --source-ranges=\"0.0.0.0/0\" --allow tcp:22",
            "sleep 30s"
]

[tests.check]
# Use audit logs to check if the last command on the instance matches the input command and verify it's response.
# The query can be modified to check for specific instance id and payload containing "oslogin".
command = "grep -q \"GNU/Linux\" <<< gcloud logging read \"resource.type=gce_instance\" --limit=10 "

[tests.cleanup]
# Delete service account
# Delete the instance
# Delete firewall
commands = [
    "gcloud iam service-accounts delete $SERVICE_ACCOUNT",
    "gcloud compute instances delete --quiet $INSTANCE_NAME",
    "gcloud compute firewall-rules delete $FIREWALL_RULE_NAME"
]

[tests.python]
# We can specify which versions of a language we want to test against.
versions = ["3.8", "3.12"]
# Legacy tests skip setup, cleanup and check. They only execute the method pointed to and check if it failed.
legacy = false
file = "../python/oslogin/oslogin_service_account_ssh.py"
method = "main"
# Parameters can be strings, integers and floats. Define appropriate value in TOML - it supports ints and floats!
parameters = ["$INPUT_COMMAND", "$PROJECT_ID", "$INSTANCE_NAME", "$ZONE", "$SERVICE_ACCOUNT", "$HOSTNAME"]
# Those packages will be installed before executing the Python sample.
requirements = "../python/oslogin/requirements.txt"
